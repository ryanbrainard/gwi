// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#FFFFFF",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={
      Array [
        Character {
          "_group": undefined,
          "_name": "A",
          "_voices": undefined,
          "player": VoicePlayerMRU {
            "playAfterLoad": false,
            "playback": Sound {
              "_coalesceStatusUpdatesInMillis": 100,
              "_errorCallback": [Function],
              "_eventEmitter": NativeEventEmitter {
                "_nativeModule": Object {
                  "addListener": [MockFunction],
                  "getAudioRecordingStatus": [MockFunction],
                  "getStatusForSound": [MockFunction],
                  "getStatusForVideo": [MockFunction],
                  "loadForSound": [MockFunction],
                  "loadForVideo": [MockFunction],
                  "pauseAudioRecording": [MockFunction],
                  "prepareAudioRecorder": [MockFunction],
                  "removeListeners": [MockFunction],
                  "replaySound": [MockFunction],
                  "replayVideo": [MockFunction],
                  "setAudioIsEnabled": [MockFunction],
                  "setAudioMode": [MockFunction],
                  "setErrorCallbackForSound": [MockFunction],
                  "setStatusForSound": [MockFunction],
                  "setStatusForVideo": [MockFunction],
                  "startAudioRecording": [MockFunction],
                  "stopAudioRecording": [MockFunction],
                  "unloadAudioRecorder": [MockFunction],
                  "unloadForSound": [MockFunction],
                  "unloadForVideo": [MockFunction],
                },
                "_subscriber": EventSubscriptionVendor {
                  "_currentSubscription": null,
                  "_subscriptionsForType": Object {
                    "didUpdateDimensions": Array [
                      EmitterSubscription {
                        "context": undefined,
                        "emitter": RCTDeviceEventEmitter {
                          "_subscriber": [Circular],
                          "sharedSubscriber": [Circular],
                        },
                        "eventType": "didUpdateDimensions",
                        "key": 0,
                        "listener": [Function],
                        "subscriber": [Circular],
                      },
                    ],
                  },
                },
              },
              "_internalStatusUpdateCallback": [Function],
              "_key": -1,
              "_lastStatusUpdate": null,
              "_lastStatusUpdateTime": null,
              "_loaded": false,
              "_loading": false,
              "_onPlaybackStatusUpdate": null,
              "_subscriptions": Array [],
              "getStatusAsync": [Function],
            },
            "voices": undefined,
          },
        },
        Character {
          "_group": undefined,
          "_name": "B",
          "_voices": undefined,
          "player": VoicePlayerMRU {
            "playAfterLoad": false,
            "playback": Sound {
              "_coalesceStatusUpdatesInMillis": 100,
              "_errorCallback": [Function],
              "_eventEmitter": NativeEventEmitter {
                "_nativeModule": Object {
                  "addListener": [MockFunction],
                  "getAudioRecordingStatus": [MockFunction],
                  "getStatusForSound": [MockFunction],
                  "getStatusForVideo": [MockFunction],
                  "loadForSound": [MockFunction],
                  "loadForVideo": [MockFunction],
                  "pauseAudioRecording": [MockFunction],
                  "prepareAudioRecorder": [MockFunction],
                  "removeListeners": [MockFunction],
                  "replaySound": [MockFunction],
                  "replayVideo": [MockFunction],
                  "setAudioIsEnabled": [MockFunction],
                  "setAudioMode": [MockFunction],
                  "setErrorCallbackForSound": [MockFunction],
                  "setStatusForSound": [MockFunction],
                  "setStatusForVideo": [MockFunction],
                  "startAudioRecording": [MockFunction],
                  "stopAudioRecording": [MockFunction],
                  "unloadAudioRecorder": [MockFunction],
                  "unloadForSound": [MockFunction],
                  "unloadForVideo": [MockFunction],
                },
                "_subscriber": EventSubscriptionVendor {
                  "_currentSubscription": null,
                  "_subscriptionsForType": Object {
                    "didUpdateDimensions": Array [
                      EmitterSubscription {
                        "context": undefined,
                        "emitter": RCTDeviceEventEmitter {
                          "_subscriber": [Circular],
                          "sharedSubscriber": [Circular],
                        },
                        "eventType": "didUpdateDimensions",
                        "key": 0,
                        "listener": [Function],
                        "subscriber": [Circular],
                      },
                    ],
                  },
                },
              },
              "_internalStatusUpdateCallback": [Function],
              "_key": -1,
              "_lastStatusUpdate": null,
              "_lastStatusUpdateTime": null,
              "_loaded": false,
              "_loading": false,
              "_onPlaybackStatusUpdate": null,
              "_subscriptions": Array [],
              "getStatusAsync": [Function],
            },
            "voices": undefined,
          },
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    invertStickyHeaders={undefined}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={3}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Object {
                "borderColor": "#FFFFFF",
                "borderWidth": 2,
              }
            }
          >
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              collapsable={undefined}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": undefined,
                  "height": 30.000000000000004,
                  "justifyContent": "center",
                  "opacity": 1,
                  "width": 30.000000000000004,
                }
              }
              testID={undefined}
              tvParallaxProperties={undefined}
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000000",
                    "fontSize": 24,
                    "fontWeight": "bold",
                  }
                }
              >
                A
              </Text>
            </View>
          </View>
          <View
            style={
              Object {
                "borderColor": "#FFFFFF",
                "borderWidth": 2,
              }
            }
          >
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              collapsable={undefined}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": undefined,
                  "height": 30.000000000000004,
                  "justifyContent": "center",
                  "opacity": 1,
                  "width": 30.000000000000004,
                }
              }
              testID={undefined}
              tvParallaxProperties={undefined}
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000000",
                    "fontSize": 24,
                    "fontWeight": "bold",
                  }
                }
              >
                B
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
