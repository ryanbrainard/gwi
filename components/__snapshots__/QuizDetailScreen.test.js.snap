// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <View
    style={
      Object {
        "height": 180,
      }
    }
  >
    <RCTScrollView
      activeAnimationOptions={null}
      activeAnimationType="timing"
      activeSlideAlignment="center"
      activeSlideOffset={20}
      apparitionDelay={0}
      automaticallyAdjustContentInsets={false}
      autoplay={false}
      autoplayDelay={5000}
      autoplayInterval={3000}
      callbackOffsetMargin={5}
      collapsable={undefined}
      containerCustomStyle={Object {}}
      contentContainerCustomStyle={Object {}}
      contentContainerStyle={
        Array [
          Object {},
          Object {
            "paddingLeft": 5,
            "paddingRight": 5,
          },
        ]
      }
      data={
        Array [
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "A",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 0,
            "_stateSetter": [Function],
          },
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 1,
            "_stateSetter": [Function],
          },
          <QuizScore
            items={
              Array [
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "A",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 0,
                  "_stateSetter": [Function],
                },
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 1,
                  "_stateSetter": [Function],
                },
              ]
            }
            restartQuiz={[Function]}
          />,
        ]
      }
      decelerationRate="fast"
      directionalLockEnabled={true}
      disableVirtualization={false}
      enableMomentum={false}
      enableSnap={true}
      firstItem={0}
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={undefined}
      hasParallaxImages={false}
      horizontal={true}
      inactiveSlideOpacity={0.7}
      inactiveSlideScale={0.9}
      inactiveSlideShift={0}
      initialNumToRender={2}
      initialScrollIndex={undefined}
      invertStickyHeaders={false}
      inverted={false}
      itemWidth={90}
      keyExtractor={[Function]}
      layout="default"
      lockScrollTimeoutDuration={1000}
      lockScrollWhileSnapping={false}
      loop={false}
      loopClonesPerSide={3}
      maxToRenderPerBatch={2}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onResponderRelease={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onSnapToItem={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onTouchStart={[Function]}
      overScrollMode="never"
      pinchGestureEnabled={false}
      removeClippedSubviews={true}
      renderItem={[Function]}
      scrollEventThrottle={1}
      scrollsToTop={false}
      shouldOptimizeUpdates={true}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
      slideStyle={Object {}}
      sliderWidth={100}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "flexDirection": "row",
          "opacity": 0,
          "width": 100,
        }
      }
      swipeThreshold={20}
      updateCellsBatchingPeriod={50}
      useScrollView={false}
      vertical={false}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={2}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          style={
            Object {
              "width": 0,
            }
          }
        />
      </View>
    </RCTScrollView>
  </View>
</View>
`;

exports[`renders correctly 2`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <View
    style={
      Object {
        "height": 180,
      }
    }
  >
    <RCTScrollView
      activeAnimationOptions={null}
      activeAnimationType="timing"
      activeSlideAlignment="center"
      activeSlideOffset={20}
      apparitionDelay={0}
      automaticallyAdjustContentInsets={false}
      autoplay={false}
      autoplayDelay={5000}
      autoplayInterval={3000}
      callbackOffsetMargin={5}
      collapsable={undefined}
      containerCustomStyle={Object {}}
      contentContainerCustomStyle={Object {}}
      contentContainerStyle={
        Array [
          Object {},
          Object {
            "paddingLeft": 5,
            "paddingRight": 5,
          },
        ]
      }
      data={
        Array [
          CharacterQuizItem {
            "_answered": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "A",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 0,
            "_stateSetter": [Function],
          },
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 1,
            "_stateSetter": [Function],
          },
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "A",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 2,
            "_stateSetter": [Function],
          },
          <QuizScore
            items={
              Array [
                CharacterQuizItem {
                  "_answered": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "A",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 0,
                  "_stateSetter": [Function],
                },
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 1,
                  "_stateSetter": [Function],
                },
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "A",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 2,
                  "_stateSetter": [Function],
                },
              ]
            }
            restartQuiz={[Function]}
          />,
        ]
      }
      decelerationRate="fast"
      directionalLockEnabled={true}
      disableVirtualization={false}
      enableMomentum={false}
      enableSnap={true}
      firstItem={0}
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={undefined}
      hasParallaxImages={false}
      horizontal={true}
      inactiveSlideOpacity={0.7}
      inactiveSlideScale={0.9}
      inactiveSlideShift={0}
      initialNumToRender={2}
      initialScrollIndex={undefined}
      invertStickyHeaders={false}
      inverted={false}
      itemWidth={90}
      keyExtractor={[Function]}
      layout="default"
      lockScrollTimeoutDuration={1000}
      lockScrollWhileSnapping={false}
      loop={false}
      loopClonesPerSide={3}
      maxToRenderPerBatch={2}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onResponderRelease={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onSnapToItem={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onTouchStart={[Function]}
      overScrollMode="never"
      pinchGestureEnabled={false}
      removeClippedSubviews={true}
      renderItem={[Function]}
      scrollEventThrottle={1}
      scrollsToTop={false}
      shouldOptimizeUpdates={true}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
      slideStyle={Object {}}
      sliderWidth={100}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "flexDirection": "row",
          "opacity": 0,
          "width": 100,
        }
      }
      swipeThreshold={20}
      updateCellsBatchingPeriod={50}
      useScrollView={false}
      vertical={false}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={2}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          style={
            Object {
              "width": 0,
            }
          }
        />
      </View>
    </RCTScrollView>
  </View>
</View>
`;

exports[`renders correctly 3`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <View
    style={
      Object {
        "height": 180,
      }
    }
  >
    <RCTScrollView
      activeAnimationOptions={null}
      activeAnimationType="timing"
      activeSlideAlignment="center"
      activeSlideOffset={20}
      apparitionDelay={0}
      automaticallyAdjustContentInsets={false}
      autoplay={false}
      autoplayDelay={5000}
      autoplayInterval={3000}
      callbackOffsetMargin={5}
      collapsable={undefined}
      containerCustomStyle={Object {}}
      contentContainerCustomStyle={Object {}}
      contentContainerStyle={
        Array [
          Object {},
          Object {
            "paddingLeft": 5,
            "paddingRight": 5,
          },
        ]
      }
      data={
        Array [
          CharacterQuizItem {
            "_answered": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "A",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 0,
            "_stateSetter": [Function],
          },
          CharacterQuizItem {
            "_answered": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 1,
            "_stateSetter": [Function],
          },
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "A",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 2,
            "_stateSetter": [Function],
          },
          <QuizScore
            items={
              Array [
                CharacterQuizItem {
                  "_answered": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "A",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 0,
                  "_stateSetter": [Function],
                },
                CharacterQuizItem {
                  "_answered": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 1,
                  "_stateSetter": [Function],
                },
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "A",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 2,
                  "_stateSetter": [Function],
                },
              ]
            }
            restartQuiz={[Function]}
          />,
        ]
      }
      decelerationRate="fast"
      directionalLockEnabled={true}
      disableVirtualization={false}
      enableMomentum={false}
      enableSnap={true}
      firstItem={0}
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={undefined}
      hasParallaxImages={false}
      horizontal={true}
      inactiveSlideOpacity={0.7}
      inactiveSlideScale={0.9}
      inactiveSlideShift={0}
      initialNumToRender={2}
      initialScrollIndex={undefined}
      invertStickyHeaders={false}
      inverted={false}
      itemWidth={90}
      keyExtractor={[Function]}
      layout="default"
      lockScrollTimeoutDuration={1000}
      lockScrollWhileSnapping={false}
      loop={false}
      loopClonesPerSide={3}
      maxToRenderPerBatch={2}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onResponderRelease={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onSnapToItem={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onTouchStart={[Function]}
      overScrollMode="never"
      pinchGestureEnabled={false}
      removeClippedSubviews={true}
      renderItem={[Function]}
      scrollEventThrottle={1}
      scrollsToTop={false}
      shouldOptimizeUpdates={true}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
      slideStyle={Object {}}
      sliderWidth={100}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "flexDirection": "row",
          "opacity": 0,
          "width": 100,
        }
      }
      swipeThreshold={20}
      updateCellsBatchingPeriod={50}
      useScrollView={false}
      vertical={false}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={2}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          style={
            Object {
              "width": 0,
            }
          }
        />
      </View>
    </RCTScrollView>
  </View>
</View>
`;

exports[`renders correctly 4`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <View
    style={
      Object {
        "height": 180,
      }
    }
  >
    <RCTScrollView
      activeAnimationOptions={null}
      activeAnimationType="timing"
      activeSlideAlignment="center"
      activeSlideOffset={20}
      apparitionDelay={0}
      automaticallyAdjustContentInsets={false}
      autoplay={false}
      autoplayDelay={5000}
      autoplayInterval={3000}
      callbackOffsetMargin={5}
      collapsable={undefined}
      containerCustomStyle={Object {}}
      contentContainerCustomStyle={Object {}}
      contentContainerStyle={
        Array [
          Object {},
          Object {
            "paddingLeft": 5,
            "paddingRight": 5,
          },
        ]
      }
      data={
        Array [
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "A",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 3,
            "_stateSetter": [Function],
          },
          CharacterQuizItem {
            "_answered": undefined,
            "_char": Character {
              "_group": Array [
                "A",
                "B",
              ],
              "_name": "B",
              "_voices": undefined,
              "player": VoicePlayerMRU {
                "playAfterLoad": false,
                "playback": Sound {
                  "_coalesceStatusUpdatesInMillis": 100,
                  "_errorCallback": [Function],
                  "_eventEmitter": NativeEventEmitter {
                    "_nativeModule": Object {
                      "addListener": [MockFunction],
                      "getAudioRecordingStatus": [MockFunction],
                      "getStatusForSound": [MockFunction],
                      "getStatusForVideo": [MockFunction],
                      "loadForSound": [MockFunction],
                      "loadForVideo": [MockFunction],
                      "pauseAudioRecording": [MockFunction],
                      "prepareAudioRecorder": [MockFunction],
                      "removeListeners": [MockFunction],
                      "replaySound": [MockFunction],
                      "replayVideo": [MockFunction],
                      "setAudioIsEnabled": [MockFunction],
                      "setAudioMode": [MockFunction],
                      "setErrorCallbackForSound": [MockFunction],
                      "setStatusForSound": [MockFunction],
                      "setStatusForVideo": [MockFunction],
                      "startAudioRecording": [MockFunction],
                      "stopAudioRecording": [MockFunction],
                      "unloadAudioRecorder": [MockFunction],
                      "unloadForSound": [MockFunction],
                      "unloadForVideo": [MockFunction],
                    },
                    "_subscriber": EventSubscriptionVendor {
                      "_currentSubscription": null,
                      "_subscriptionsForType": Object {
                        "didUpdateDimensions": Array [
                          EmitterSubscription {
                            "context": undefined,
                            "emitter": RCTDeviceEventEmitter {
                              "_subscriber": [Circular],
                              "sharedSubscriber": [Circular],
                            },
                            "eventType": "didUpdateDimensions",
                            "key": 0,
                            "listener": [Function],
                            "subscriber": [Circular],
                          },
                        ],
                      },
                    },
                  },
                  "_internalStatusUpdateCallback": [Function],
                  "_key": -1,
                  "_lastStatusUpdate": null,
                  "_lastStatusUpdateTime": null,
                  "_loaded": false,
                  "_loading": false,
                  "_onPlaybackStatusUpdate": null,
                  "_subscriptions": Array [],
                  "getStatusAsync": [Function],
                },
                "voices": undefined,
              },
            },
            "_choices": Array [
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "A",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
              Character {
                "_group": Array [
                  "A",
                  "B",
                ],
                "_name": "B",
                "_voices": undefined,
                "player": VoicePlayerMRU {
                  "playAfterLoad": false,
                  "playback": Sound {
                    "_coalesceStatusUpdatesInMillis": 100,
                    "_errorCallback": [Function],
                    "_eventEmitter": NativeEventEmitter {
                      "_nativeModule": Object {
                        "addListener": [MockFunction],
                        "getAudioRecordingStatus": [MockFunction],
                        "getStatusForSound": [MockFunction],
                        "getStatusForVideo": [MockFunction],
                        "loadForSound": [MockFunction],
                        "loadForVideo": [MockFunction],
                        "pauseAudioRecording": [MockFunction],
                        "prepareAudioRecorder": [MockFunction],
                        "removeListeners": [MockFunction],
                        "replaySound": [MockFunction],
                        "replayVideo": [MockFunction],
                        "setAudioIsEnabled": [MockFunction],
                        "setAudioMode": [MockFunction],
                        "setErrorCallbackForSound": [MockFunction],
                        "setStatusForSound": [MockFunction],
                        "setStatusForVideo": [MockFunction],
                        "startAudioRecording": [MockFunction],
                        "stopAudioRecording": [MockFunction],
                        "unloadAudioRecorder": [MockFunction],
                        "unloadForSound": [MockFunction],
                        "unloadForVideo": [MockFunction],
                      },
                      "_subscriber": EventSubscriptionVendor {
                        "_currentSubscription": null,
                        "_subscriptionsForType": Object {
                          "didUpdateDimensions": Array [
                            EmitterSubscription {
                              "context": undefined,
                              "emitter": RCTDeviceEventEmitter {
                                "_subscriber": [Circular],
                                "sharedSubscriber": [Circular],
                              },
                              "eventType": "didUpdateDimensions",
                              "key": 0,
                              "listener": [Function],
                              "subscriber": [Circular],
                            },
                          ],
                        },
                      },
                    },
                    "_internalStatusUpdateCallback": [Function],
                    "_key": -1,
                    "_lastStatusUpdate": null,
                    "_lastStatusUpdateTime": null,
                    "_loaded": false,
                    "_loading": false,
                    "_onPlaybackStatusUpdate": null,
                    "_subscriptions": Array [],
                    "getStatusAsync": [Function],
                  },
                  "voices": undefined,
                },
              },
            ],
            "_key": 4,
            "_stateSetter": [Function],
          },
          <QuizScore
            items={
              Array [
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "A",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 3,
                  "_stateSetter": [Function],
                },
                CharacterQuizItem {
                  "_answered": undefined,
                  "_char": Character {
                    "_group": Array [
                      "A",
                      "B",
                    ],
                    "_name": "B",
                    "_voices": undefined,
                    "player": VoicePlayerMRU {
                      "playAfterLoad": false,
                      "playback": Sound {
                        "_coalesceStatusUpdatesInMillis": 100,
                        "_errorCallback": [Function],
                        "_eventEmitter": NativeEventEmitter {
                          "_nativeModule": Object {
                            "addListener": [MockFunction],
                            "getAudioRecordingStatus": [MockFunction],
                            "getStatusForSound": [MockFunction],
                            "getStatusForVideo": [MockFunction],
                            "loadForSound": [MockFunction],
                            "loadForVideo": [MockFunction],
                            "pauseAudioRecording": [MockFunction],
                            "prepareAudioRecorder": [MockFunction],
                            "removeListeners": [MockFunction],
                            "replaySound": [MockFunction],
                            "replayVideo": [MockFunction],
                            "setAudioIsEnabled": [MockFunction],
                            "setAudioMode": [MockFunction],
                            "setErrorCallbackForSound": [MockFunction],
                            "setStatusForSound": [MockFunction],
                            "setStatusForVideo": [MockFunction],
                            "startAudioRecording": [MockFunction],
                            "stopAudioRecording": [MockFunction],
                            "unloadAudioRecorder": [MockFunction],
                            "unloadForSound": [MockFunction],
                            "unloadForVideo": [MockFunction],
                          },
                          "_subscriber": EventSubscriptionVendor {
                            "_currentSubscription": null,
                            "_subscriptionsForType": Object {
                              "didUpdateDimensions": Array [
                                EmitterSubscription {
                                  "context": undefined,
                                  "emitter": RCTDeviceEventEmitter {
                                    "_subscriber": [Circular],
                                    "sharedSubscriber": [Circular],
                                  },
                                  "eventType": "didUpdateDimensions",
                                  "key": 0,
                                  "listener": [Function],
                                  "subscriber": [Circular],
                                },
                              ],
                            },
                          },
                        },
                        "_internalStatusUpdateCallback": [Function],
                        "_key": -1,
                        "_lastStatusUpdate": null,
                        "_lastStatusUpdateTime": null,
                        "_loaded": false,
                        "_loading": false,
                        "_onPlaybackStatusUpdate": null,
                        "_subscriptions": Array [],
                        "getStatusAsync": [Function],
                      },
                      "voices": undefined,
                    },
                  },
                  "_choices": Array [
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "A",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                    Character {
                      "_group": Array [
                        "A",
                        "B",
                      ],
                      "_name": "B",
                      "_voices": undefined,
                      "player": VoicePlayerMRU {
                        "playAfterLoad": false,
                        "playback": Sound {
                          "_coalesceStatusUpdatesInMillis": 100,
                          "_errorCallback": [Function],
                          "_eventEmitter": NativeEventEmitter {
                            "_nativeModule": Object {
                              "addListener": [MockFunction],
                              "getAudioRecordingStatus": [MockFunction],
                              "getStatusForSound": [MockFunction],
                              "getStatusForVideo": [MockFunction],
                              "loadForSound": [MockFunction],
                              "loadForVideo": [MockFunction],
                              "pauseAudioRecording": [MockFunction],
                              "prepareAudioRecorder": [MockFunction],
                              "removeListeners": [MockFunction],
                              "replaySound": [MockFunction],
                              "replayVideo": [MockFunction],
                              "setAudioIsEnabled": [MockFunction],
                              "setAudioMode": [MockFunction],
                              "setErrorCallbackForSound": [MockFunction],
                              "setStatusForSound": [MockFunction],
                              "setStatusForVideo": [MockFunction],
                              "startAudioRecording": [MockFunction],
                              "stopAudioRecording": [MockFunction],
                              "unloadAudioRecorder": [MockFunction],
                              "unloadForSound": [MockFunction],
                              "unloadForVideo": [MockFunction],
                            },
                            "_subscriber": EventSubscriptionVendor {
                              "_currentSubscription": null,
                              "_subscriptionsForType": Object {
                                "didUpdateDimensions": Array [
                                  EmitterSubscription {
                                    "context": undefined,
                                    "emitter": RCTDeviceEventEmitter {
                                      "_subscriber": [Circular],
                                      "sharedSubscriber": [Circular],
                                    },
                                    "eventType": "didUpdateDimensions",
                                    "key": 0,
                                    "listener": [Function],
                                    "subscriber": [Circular],
                                  },
                                ],
                              },
                            },
                          },
                          "_internalStatusUpdateCallback": [Function],
                          "_key": -1,
                          "_lastStatusUpdate": null,
                          "_lastStatusUpdateTime": null,
                          "_loaded": false,
                          "_loading": false,
                          "_onPlaybackStatusUpdate": null,
                          "_subscriptions": Array [],
                          "getStatusAsync": [Function],
                        },
                        "voices": undefined,
                      },
                    },
                  ],
                  "_key": 4,
                  "_stateSetter": [Function],
                },
              ]
            }
            restartQuiz={[Function]}
          />,
        ]
      }
      decelerationRate="fast"
      directionalLockEnabled={true}
      disableVirtualization={false}
      enableMomentum={false}
      enableSnap={true}
      firstItem={0}
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={undefined}
      hasParallaxImages={false}
      horizontal={true}
      inactiveSlideOpacity={0.7}
      inactiveSlideScale={0.9}
      inactiveSlideShift={0}
      initialNumToRender={2}
      initialScrollIndex={undefined}
      invertStickyHeaders={false}
      inverted={false}
      itemWidth={90}
      keyExtractor={[Function]}
      layout="default"
      lockScrollTimeoutDuration={1000}
      lockScrollWhileSnapping={false}
      loop={false}
      loopClonesPerSide={3}
      maxToRenderPerBatch={2}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onResponderRelease={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onSnapToItem={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onTouchStart={[Function]}
      overScrollMode="never"
      pinchGestureEnabled={false}
      removeClippedSubviews={true}
      renderItem={[Function]}
      scrollEventThrottle={1}
      scrollsToTop={false}
      shouldOptimizeUpdates={true}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
      slideStyle={Object {}}
      sliderWidth={100}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "flexDirection": "row",
          "opacity": 0,
          "width": 100,
        }
      }
      swipeThreshold={20}
      updateCellsBatchingPeriod={50}
      useScrollView={false}
      vertical={false}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={2}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        />
        <View
          style={
            Object {
              "width": 0,
            }
          }
        />
      </View>
    </RCTScrollView>
  </View>
</View>
`;
